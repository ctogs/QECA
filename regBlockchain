import hashlib
import time

class Block:
    def __init__(self, index, transactions, timestamp, previous_hash, nonce=0):
        self.index = index
        self.transactions = transactions
        self.timestamp = timestamp
        self.previous_hash = previous_hash
        self.nonce = nonce
        self.hash = self.compute_hash()

    def compute_hash(self):
        block_string = f"{self.index}{self.transactions}{self.timestamp}{self.previous_hash}{self.nonce}"
        return hashlib.sha256(block_string.encode()).hexdigest()

    def proof_of_work(self, difficulty):
        self.nonce = 0
        while not self.hash.startswith('0' * difficulty):
            self.nonce += 1
            self.hash = self.compute_hash()
        return self.hash

class Blockchain:
    def __init__(self, difficulty=2):
        self.chain = []
        self.transactions = []
        self.create_genesis_block()
        self.difficulty = difficulty

    def create_genesis_block(self):
        genesis_block = Block(0, [], time.time(), "0")
        genesis_block.hash = genesis_block.compute_hash()
        self.chain.append(genesis_block)

    def add_block(self, block):
        block.previous_hash = self.chain[-1].hash
        block.hash = block.proof_of_work(self.difficulty)
        self.chain.append(block)

    def add_transaction(self, transaction):
        self.transactions.append(transaction)

    def mine_block(self):
        if not self.transactions:
            return False

        new_block = Block(index=len(self.chain),
                          transactions=self.transactions,
                          timestamp=time.time(),
                          previous_hash=self.chain[-1].hash)
        new_block.hash = new_block.proof_of_work(self.difficulty)
        self.chain.append(new_block)
        self.transactions = []
        return new_block

    def is_valid(self):
        for i in range(1, len(self.chain)):
            current = self.chain[i]
            previous = self.chain[i - 1]

            if current.hash != current.compute_hash():
                return False

            if current.previous_hash != previous.hash:
                return False

        return True

# Example usage
if __name__ == "__main__":
    blockchain = Blockchain(difficulty=4)

    # Adding some transactions and mining blocks
    blockchain.add_transaction("Alice pays Bob 1 BTC")
    blockchain.add_transaction("Bob pays Charlie 0.5 BTC")
    blockchain.mine_block()

    blockchain.add_transaction("Charlie pays Dave 0.3 BTC")
    blockchain.mine_block()

    # Print the blockchain
    for block in blockchain.chain:
        print(f"Block {block.index}: {block.transactions} - Hash: {block.hash}")

    # Check if the blockchain is valid
    print("Blockchain valid:", blockchain.is_valid())



