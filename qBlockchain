from qiskit_aer import AerSimulator
from qiskit import QuantumCircuit, transpile
from qiskit.circuit.library import MCMT
import hashlib
import time

def grovers_circuit(num_qubits, target_state):
    qc = QuantumCircuit(num_qubits, num_qubits)  # Add a classical register for measurements

    # Initialize in the uniform superposition
    qc.h(range(num_qubits))

    # Apply a single iteration of Grover's algorithm
    # Oracle: flips the sign of the target state
    qc.h(target_state)
    qc.z(target_state)
    qc.h(target_state)

    # Diffuser
    qc.h(range(num_qubits))
    qc.x(range(num_qubits))
    qc.h(num_qubits - 1)
    qc.append(MCMT('x', num_ctrl_qubits=num_qubits - 1, num_target_qubits=1), range(num_qubits))
    qc.h(num_qubits - 1)
    qc.x(range(num_qubits))
    qc.h(range(num_qubits))

    # Measurement
    qc.measure(range(num_qubits), range(num_qubits))

    return qc

class QBlock:
    def __init__(self, index, transactions, timestamp, previous_hash, num_qubits=10, difficulty=3):
        self.index = index
        self.transactions = transactions
        self.timestamp = timestamp
        self.previous_hash = previous_hash
        self.num_qubits = num_qubits
        self.difficulty = difficulty
        self.quantum_nonce = self.generate_quantum_nonce()
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        block_string = f"{self.index}{self.transactions}{self.timestamp}{self.previous_hash}{self.quantum_nonce}"
        return hashlib.sha256(block_string.encode()).hexdigest()

    def generate_quantum_nonce(self):
        # Construct a quantum circuit for Grover's algorithm
        target_state = 1  # Simplified for demonstration
        qc = grovers_circuit(self.num_qubits, target_state)

        # Simulate the quantum circuit
        simulator = AerSimulator()
        transpiled_circuit = transpile(qc, simulator)
        result = simulator.run(transpiled_circuit, shots=1).result()

        # Extract the result and convert to a nonce
        nonce = int(result.get_counts().most_frequent(), 2)
        return nonce

class QBlockchain:
    def __init__(self, difficulty=3, num_qubits=10):
        self.chain = [self.create_genesis_block()]
        self.difficulty = difficulty
        self.num_qubits = num_qubits

    def create_genesis_block(self):
        return QBlock(0, "Genesis QBlock", time.time(), "0", self.num_qubits, self.difficulty)

    def get_latest_block(self):
        return self.chain[-1]

    def add_block(self, new_block):
        new_block.previous_hash = self.get_latest_block().hash
        new_block.hash = new_block.calculate_hash()
        self.chain.append(new_block)

    def is_chain_valid(self):
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i - 1]

            if current_block.hash != current_block.calculate_hash():
                print("Current block's hash is invalid.")
                return False

            if current_block.previous_hash != previous_block.hash:
                print("Previous block's hash is invalid.")
                return False

        return True


# Example usage
my_qblockchain = QBlockchain()

my_qblockchain.add_block(QBlock(1, "QTransaction 1", time.time(), my_qblockchain.get_latest_block().hash, my_qblockchain.num_qubits, my_qblockchain.difficulty))
my_qblockchain.add_block(QBlock(2, "QTransaction 2", time.time(), my_qblockchain.get_latest_block().hash, my_qblockchain.num_qubits, my_qblockchain.difficulty))

for block in my_qblockchain.chain:
    print(f"Index: {block.index}, Hash: {block.hash}, Quantum Nonce: {block.quantum_nonce}, Previous Hash: {block.previous_hash}")
